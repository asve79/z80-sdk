	module	math

;The following routine multiplies de by a and places the result in ahl (which means a is the most significant byte of the product, l the least significant and h the intermediate one...)

mult_a_de
	push	bc
	ld	c, 0
        ld	h, c
        ld	l, h

        add	a, a		; optimised 1st iteration
        jr	nc, $+4
        ld	h,d
        ld	l,e

        ld b, 7
_loop1
        add	hl, hl
        rla
        jr	nc, $+4
        add	hl, de
        adc	a, c            ; yes this is actually adc a, 0 but since c is free we set it to zero and so we can save 1 byte and up to 3 T-states per iteration
   
        djnz	_loop1
	pop 	bc
        ret

;The following routine multiplies h by e and places the result in hl
mult_h_e
	ld	l, 0
	ld	d, l

	sla	h		; optimised 1st iteration
	jr	nc, $+3
	ld	l, e
   
	ld b, 7
_loop2
	add	hl, hl          
	jr	nc, $+3
	add	hl, de
   
	djnz	_loop2
   
	ret

mult_de_bc
	PUSH	AF
	ld	hl, 0

	sla	e		; optimised 1st iteration
	rl	d
	jr	nc, $+4
	ld	h, b
	ld	l, c

	ld	a, 15
_loop3:
	add	hl, hl
	rl	e
	rl	d
	jr	nc, $+6
	add	hl, bc
	jr	nc, $+3
	inc	de

	dec	a
	jr	nz, _loop3
	POP	AF
	ret

;multiplies unsigned long int to 10
limul10:		; умножение 32-битного беззнакового числа на 10.
; in/out: de = high word of long
; 	  	  hl = low word of long

; x2		
		push	af
		push	bc
		add		hl,hl
		ld		b,h
		ld		c,l
		push	de
		exx
		pop		hl
		adc		hl,hl
		ld		b,h
		ld		c,l
		exx
; x4
		add		hl,hl
		exx
		adc		hl,hl
		exx
; x8		
		add		hl,hl
		exx
		adc		hl,hl
		exx
; x10
		add		hl,bc
		exx
		adc		hl,bc
		push	hl
		exx
		pop 	de
		pop		bc
		pop		af
		ret

	endmodule
