	MODULE	strings

	include	"z80-sdk/math/math.a80"

;find end string. return HL to position with 0
;IN:
; HL - bufer
;OUT:
; HL - pointer to EOL
;  A - number of number of caracters
findzero
	LD	C,0
fz_loop	LD	A,(HL)
	OR	A
	JR	Z,fz_end
	INC	HL
	INC 	C
	JR	fz_loop
fz_end	LD	A,C
	RET

;fill zero string
;IN:
; HL - bufer
; BC - count
fillzero
	PUSH	DE
	PUSH	HL
	POP	DE
	INC	DE
	DEC	BC
	LD	(HL),0
	LD	A,B
	OR	A
	JNZ	fz0
	LD	A,C
	OR	A
	JZ	fz1	
fz0	LDIR
fz1	POP	DE
	RET

;compare string; return a as result. 1 - equal 0 - not equal
cmpstr
	DEC	DE
cmpstr1 INC	DE
	LD	A,(DE)
	CPI
	JP	NZ, cmpstrn
	LD	A,B
	OR	A
	JP	NZ, cmpstr1
	LD	A,C
	OR	A
	JP	NZ, cmpstr1
	LD	A,1
	JP	cmpstre
cmpstrn XOR	A
cmpstre	ret

;Convert number from text format to decimal. (get only A text symbols)
;IN:
; HL- string address
; A - length num string
;OUT:
; DE - number
; A - status. 0-ok
texttonum_c
	PUSH	AF
	PUSH	BC
	LD	BC,1
	LD	(tmpmul),BC
	LD	(tmpdig),A	;//reset temporary
	LD	B,A
ttnmc	INC	HL
	DJNZ	ttnmc
	DEC	HL
	LD	(tmpptr),HL
	XOR	A
	LD 	(tmpres),A
	LD 	(tmpres+1),A
	JP	ttn4

;Convert number from text format to decimal. (get numbers while not number character is found)
;IN:
; HL- string address
;OUT:
; DE - number
; A - status. 0-ok
texttonum_n
	PUSH	AF
	PUSH	BC
	XOR	A
	LD	BC,1
	LD	(tmpmul),BC
	LD	(tmpptr),HL
	LD	(tmpdig),A	;//reset temporary
	LD 	(tmpres),A
	LD 	(tmpres+1),A
	LD	C,0
ttn1n	LD	A,(HL)		;//go to end line
	OR	A
	JZ	ttn3n
	CP	'0'
	JP	C,ttn3n		;//if code < '0' it is not number
	INC	HL
	INC	C
	CP	'9'+1		
	JP	C,ttn1n		;//if code < '9'+1 it is number
	DEC	HL
	DEC	C
ttn3n	DEC	HL
	LD	(tmpptr),HL
	LD	A,C
	LD	(tmpdig),A
	XOR	A
	LD	(tmpres),A
	JP	ttn4

;Convert number from text format to decimal. (string contain only number characters witch zero as EOL)
;IN:
; HL- string address
;OUT:
; DE - number
; A - status. 0-ok
texttonum
	PUSH	AF
	PUSH	BC
	XOR	A
	LD	BC,1
	LD	(tmpmul),BC
	LD	(tmpptr),HL
	LD	(tmpdig),A	;//reset temporary
	LD 	(tmpres),A
	LD 	(tmpres+1),A
	LD	C,0
ttn1	LD	A,(HL)	;//go to end line
	OR	A
	JZ	ttn3
	INC	HL
	INC	C
	JR	ttn1
ttn3	DEC	HL
	LD	(tmpptr),HL
	LD	A,C
	LD	(tmpdig),A
	XOR	A
	LD	(tmpres),A
ttn4	LD	BC,(tmpmul)
	LD	HL,(tmpptr)
	LD	A,(HL)
	DEC	HL
	LD	(tmpptr),HL
	SUB	'0'		;//put number code to A
	LD	E,A
	LD	D,0
	CALL	math.mult_de_bc
	LD	DE,(tmpres)
	ADD	HL,DE
	LD	(tmpres),HL

	LD	de,10
	CALL	math.mult_de_bc	; //hl=bc*10
	LD	(tmpmul),HL
	LD	A,(tmpdig)
	DEC	A
	LD	(tmpdig),A
	JNZ	ttn4
	LD	DE,(tmpres)
	POP	BC
	POP	AF
	XOR	A
	RET

tmpmul	DW	0
tmpptr	DW	0
tmpdig  DB	0
tmpres	DW	0

;PTR To Next Vol - set pointer to next number volume
;IN:
; HL - current pointer to text. Like "103, hello 11 num",0
;OUT:
; HL - point to next numberic volume. Like "11 num",0
ptrtonextvol
	LD	A,(HL)		;//skip numbers if exists
	OR	A
	RET	Z
	CP	'0'
	JP	C,pttnv1	;// if code < '0', it is character => got to fin number section
	INC	HL
	CP	'9'+1		
	JP	C,ptrtonextvol	;// if code <= '9'+1, it is number => skip it
	DEC	HL
pttnv1	INC	HL		;//new find number
	LD	A,(HL)
	OR	A		;//if zero code => return
	RET	Z		
	CP	'0'
	JR	C,pttnv1	;// if code < '0', it is character
	CP	'9'+1
	RET	C		;// if code <= '9'+1, it is number => return
	JR	pttnv1

;Pointer to next line - set pointer to next line (CR/LF or \0 code as EOL)
;IN:
; HL - current pointer
;OUT:
; HL - point to 1st character of new line or \0 
ptrtonextline
	LD	A,(HL)		;//skip numbers if exists
	OR	A
	RET	Z
	CP	13
	JZ	pttnle
	INC	HL
	JR	ptrtonextline
pttnle  INC	HL
	LD	A,(HL)
	CP	10		
	RET	NZ
	INC	HL		;//skip chr(10) after chr(13)
	RET

	ENDMODULE

